# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.4
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.



from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_Bline', [dirname(__file__)])
        except ImportError:
            import _Bline
            return _Bline
        if fp is not None:
            try:
                _mod = imp.load_module('_Bline', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _Bline = swig_import_helper()
    del swig_import_helper
else:
    import _Bline
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _Bline.delete_SwigPyIterator
    __del__ = lambda self : None;
    def value(self): return _Bline.SwigPyIterator_value(self)
    def incr(self, n = 1): return _Bline.SwigPyIterator_incr(self, n)
    def decr(self, n = 1): return _Bline.SwigPyIterator_decr(self, n)
    def distance(self, *args): return _Bline.SwigPyIterator_distance(self, *args)
    def equal(self, *args): return _Bline.SwigPyIterator_equal(self, *args)
    def copy(self): return _Bline.SwigPyIterator_copy(self)
    def next(self): return _Bline.SwigPyIterator_next(self)
    def __next__(self): return _Bline.SwigPyIterator___next__(self)
    def previous(self): return _Bline.SwigPyIterator_previous(self)
    def advance(self, *args): return _Bline.SwigPyIterator_advance(self, *args)
    def __eq__(self, *args): return _Bline.SwigPyIterator___eq__(self, *args)
    def __ne__(self, *args): return _Bline.SwigPyIterator___ne__(self, *args)
    def __iadd__(self, *args): return _Bline.SwigPyIterator___iadd__(self, *args)
    def __isub__(self, *args): return _Bline.SwigPyIterator___isub__(self, *args)
    def __add__(self, *args): return _Bline.SwigPyIterator___add__(self, *args)
    def __sub__(self, *args): return _Bline.SwigPyIterator___sub__(self, *args)
    def __iter__(self): return self
SwigPyIterator_swigregister = _Bline.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class IntVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IntVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IntVector, name)
    __repr__ = _swig_repr
    def iterator(self): return _Bline.IntVector_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _Bline.IntVector___nonzero__(self)
    def __bool__(self): return _Bline.IntVector___bool__(self)
    def __len__(self): return _Bline.IntVector___len__(self)
    def pop(self): return _Bline.IntVector_pop(self)
    def __getslice__(self, *args): return _Bline.IntVector___getslice__(self, *args)
    def __setslice__(self, *args): return _Bline.IntVector___setslice__(self, *args)
    def __delslice__(self, *args): return _Bline.IntVector___delslice__(self, *args)
    def __delitem__(self, *args): return _Bline.IntVector___delitem__(self, *args)
    def __getitem__(self, *args): return _Bline.IntVector___getitem__(self, *args)
    def __setitem__(self, *args): return _Bline.IntVector___setitem__(self, *args)
    def append(self, *args): return _Bline.IntVector_append(self, *args)
    def empty(self): return _Bline.IntVector_empty(self)
    def size(self): return _Bline.IntVector_size(self)
    def clear(self): return _Bline.IntVector_clear(self)
    def swap(self, *args): return _Bline.IntVector_swap(self, *args)
    def get_allocator(self): return _Bline.IntVector_get_allocator(self)
    def begin(self): return _Bline.IntVector_begin(self)
    def end(self): return _Bline.IntVector_end(self)
    def rbegin(self): return _Bline.IntVector_rbegin(self)
    def rend(self): return _Bline.IntVector_rend(self)
    def pop_back(self): return _Bline.IntVector_pop_back(self)
    def erase(self, *args): return _Bline.IntVector_erase(self, *args)
    def __init__(self, *args): 
        this = _Bline.new_IntVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _Bline.IntVector_push_back(self, *args)
    def front(self): return _Bline.IntVector_front(self)
    def back(self): return _Bline.IntVector_back(self)
    def assign(self, *args): return _Bline.IntVector_assign(self, *args)
    def resize(self, *args): return _Bline.IntVector_resize(self, *args)
    def insert(self, *args): return _Bline.IntVector_insert(self, *args)
    def reserve(self, *args): return _Bline.IntVector_reserve(self, *args)
    def capacity(self): return _Bline.IntVector_capacity(self)
    __swig_destroy__ = _Bline.delete_IntVector
    __del__ = lambda self : None;
IntVector_swigregister = _Bline.IntVector_swigregister
IntVector_swigregister(IntVector)

class DoubVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DoubVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DoubVector, name)
    __repr__ = _swig_repr
    def iterator(self): return _Bline.DoubVector_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _Bline.DoubVector___nonzero__(self)
    def __bool__(self): return _Bline.DoubVector___bool__(self)
    def __len__(self): return _Bline.DoubVector___len__(self)
    def pop(self): return _Bline.DoubVector_pop(self)
    def __getslice__(self, *args): return _Bline.DoubVector___getslice__(self, *args)
    def __setslice__(self, *args): return _Bline.DoubVector___setslice__(self, *args)
    def __delslice__(self, *args): return _Bline.DoubVector___delslice__(self, *args)
    def __delitem__(self, *args): return _Bline.DoubVector___delitem__(self, *args)
    def __getitem__(self, *args): return _Bline.DoubVector___getitem__(self, *args)
    def __setitem__(self, *args): return _Bline.DoubVector___setitem__(self, *args)
    def append(self, *args): return _Bline.DoubVector_append(self, *args)
    def empty(self): return _Bline.DoubVector_empty(self)
    def size(self): return _Bline.DoubVector_size(self)
    def clear(self): return _Bline.DoubVector_clear(self)
    def swap(self, *args): return _Bline.DoubVector_swap(self, *args)
    def get_allocator(self): return _Bline.DoubVector_get_allocator(self)
    def begin(self): return _Bline.DoubVector_begin(self)
    def end(self): return _Bline.DoubVector_end(self)
    def rbegin(self): return _Bline.DoubVector_rbegin(self)
    def rend(self): return _Bline.DoubVector_rend(self)
    def pop_back(self): return _Bline.DoubVector_pop_back(self)
    def erase(self, *args): return _Bline.DoubVector_erase(self, *args)
    def __init__(self, *args): 
        this = _Bline.new_DoubVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _Bline.DoubVector_push_back(self, *args)
    def front(self): return _Bline.DoubVector_front(self)
    def back(self): return _Bline.DoubVector_back(self)
    def assign(self, *args): return _Bline.DoubVector_assign(self, *args)
    def resize(self, *args): return _Bline.DoubVector_resize(self, *args)
    def insert(self, *args): return _Bline.DoubVector_insert(self, *args)
    def reserve(self, *args): return _Bline.DoubVector_reserve(self, *args)
    def capacity(self): return _Bline.DoubVector_capacity(self)
    __swig_destroy__ = _Bline.delete_DoubVector
    __del__ = lambda self : None;
DoubVector_swigregister = _Bline.DoubVector_swigregister
DoubVector_swigregister(DoubVector)

class DoubMatrix(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DoubMatrix, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DoubMatrix, name)
    __repr__ = _swig_repr
    def iterator(self): return _Bline.DoubMatrix_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _Bline.DoubMatrix___nonzero__(self)
    def __bool__(self): return _Bline.DoubMatrix___bool__(self)
    def __len__(self): return _Bline.DoubMatrix___len__(self)
    def pop(self): return _Bline.DoubMatrix_pop(self)
    def __getslice__(self, *args): return _Bline.DoubMatrix___getslice__(self, *args)
    def __setslice__(self, *args): return _Bline.DoubMatrix___setslice__(self, *args)
    def __delslice__(self, *args): return _Bline.DoubMatrix___delslice__(self, *args)
    def __delitem__(self, *args): return _Bline.DoubMatrix___delitem__(self, *args)
    def __getitem__(self, *args): return _Bline.DoubMatrix___getitem__(self, *args)
    def __setitem__(self, *args): return _Bline.DoubMatrix___setitem__(self, *args)
    def append(self, *args): return _Bline.DoubMatrix_append(self, *args)
    def empty(self): return _Bline.DoubMatrix_empty(self)
    def size(self): return _Bline.DoubMatrix_size(self)
    def clear(self): return _Bline.DoubMatrix_clear(self)
    def swap(self, *args): return _Bline.DoubMatrix_swap(self, *args)
    def get_allocator(self): return _Bline.DoubMatrix_get_allocator(self)
    def begin(self): return _Bline.DoubMatrix_begin(self)
    def end(self): return _Bline.DoubMatrix_end(self)
    def rbegin(self): return _Bline.DoubMatrix_rbegin(self)
    def rend(self): return _Bline.DoubMatrix_rend(self)
    def pop_back(self): return _Bline.DoubMatrix_pop_back(self)
    def erase(self, *args): return _Bline.DoubMatrix_erase(self, *args)
    def __init__(self, *args): 
        this = _Bline.new_DoubMatrix(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _Bline.DoubMatrix_push_back(self, *args)
    def front(self): return _Bline.DoubMatrix_front(self)
    def back(self): return _Bline.DoubMatrix_back(self)
    def assign(self, *args): return _Bline.DoubMatrix_assign(self, *args)
    def resize(self, *args): return _Bline.DoubMatrix_resize(self, *args)
    def insert(self, *args): return _Bline.DoubMatrix_insert(self, *args)
    def reserve(self, *args): return _Bline.DoubMatrix_reserve(self, *args)
    def capacity(self): return _Bline.DoubMatrix_capacity(self)
    __swig_destroy__ = _Bline.delete_DoubMatrix
    __del__ = lambda self : None;
DoubMatrix_swigregister = _Bline.DoubMatrix_swigregister
DoubMatrix_swigregister(DoubMatrix)

class Bline(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Bline, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Bline, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _Bline.new_Bline()
        try: self.this.append(this)
        except: self.this = this
    def set_Bmodel(self, *args): return _Bline.Bline_set_Bmodel(self, *args)
    def set_Blineparams(self, *args): return _Bline.Bline_set_Blineparams(self, *args)
    __swig_setmethods__["ss"] = _Bline.Bline_ss_set
    __swig_getmethods__["ss"] = _Bline.Bline_ss_get
    if _newclass:ss = _swig_property(_Bline.Bline_ss_get, _Bline.Bline_ss_set)
    __swig_setmethods__["sini"] = _Bline.Bline_sini_set
    __swig_getmethods__["sini"] = _Bline.Bline_sini_get
    if _newclass:sini = _swig_property(_Bline.Bline_sini_get, _Bline.Bline_sini_set)
    def calc_Bline(self, *args): return _Bline.Bline_calc_Bline(self, *args)
    __swig_setmethods__["every"] = _Bline.Bline_every_set
    __swig_getmethods__["every"] = _Bline.Bline_every_get
    if _newclass:every = _swig_property(_Bline.Bline_every_get, _Bline.Bline_every_set)
    def report(self): return _Bline.Bline_report(self)
    def returnMat(self): return _Bline.Bline_returnMat(self)
    def retLambdaMin(self): return _Bline.Bline_retLambdaMin(self)
    def next_Brealization(self): return _Bline.Bline_next_Brealization(self)
    def retSigmaBoRatio(self): return _Bline.Bline_retSigmaBoRatio(self)
    __swig_destroy__ = _Bline.delete_Bline
    __del__ = lambda self : None;
Bline_swigregister = _Bline.Bline_swigregister
Bline_swigregister(Bline)

# This file is compatible with both classic and new-style classes.


